// Importa la base de datos en formato JSON y una función para guardar cambios en ella
const DB = require("./db.json");
const { saveToDatabase} = require("./utils");

// Función para obtener todos los clientes de la base de datos
const getAllClients = () => {
    return DB.clientes;
};

// Función para crear un nuevo cliente en la base de datos
const createNewClient = (newClient) => {
    // Verifica si ya existe un cliente con el mismo nombre
    const isAlreadyAdded =
      DB.clientes.findIndex((client) => client.nombre === 
      newClient.nombre) > -1;
    
    if (isAlreadyAdded) {
      // Tira un error si el cliente ya existe
      throw{
        status: 400,
        message: 'ya existe un cliente con ese nombre'
      };
    }
    try{
      // Agrega el nuevo cliente al array de clientes y guarda la base de datos
      DB.clientes.push(newClient);
     saveToDatabase(DB);
      return newClient;
    } catch (error){
      throw { status: 500, message: error?.message || error}
    }
};


// Función para obtener un cliente específico por su ID
const getOneClient =(clientId) => {
  try{
     // Busca el cliente por ID
    const client =
    DB.clientes.find((c) => c.id === clientId);
    if(!client){
      // Lanza un error si el cliente no se encuentra
      throw {
        status: 404,
        message: "Cliente no encontrado",
      };
    }
    return client;
  } catch (error) {
    throw { status: error?.status || 500, message: error?.message || error };
  }
};

// Función para actualizar un cliente específico
const updateOneClient = (clientId, changes) => {
    const indexForUpdated = DB.clientes.findIndex(
        (c) => c.id === clientId);

    if (indexForUpdated === -1){
      throw{
        status: 404,
        message: 'no existe el cliente'
      };
    }

    // Crea un nuevo objeto de cliente con los cambios aplicados
    const updateClient = {
        ...DB.clientes[indexForUpdated],
        ...changes,
    }

    // Actualiza el cliente en la base de datos y guarda los cambios
    DB.clientes[indexForUpdated] = updateClient;
    saveToDatabase(DB);
    return updateClient;
  };

  // Función para eliminar un cliente por su ID
  const deleteOneClient = (clientId) => {
    try{
      // Encuentra el índice del cliente en el array
      const indexForDeleted = DB.clientes.findIndex(
        (client) => client.id === clientId
     );

     if (indexForDeleted === -1) {
       throw {
         status: 404,
          message: `El cliente no existe`,
        };
      }

     // Elimina el cliente del array y guarda la base de datos
     DB.clientes.splice(indexForDeleted, 1);
     saveToDatabase(DB);
    } catch (error) {
      throw { status: error?.status || 500, message: error?.message || error };
    }
  };

// Exporta las funciones para ser utilizadas en el service
module.exports ={
    getAllClients,
    createNewClient,
    getOneClient,
    updateOneClient,
    deleteOneClient
};
