// Importa la base de datos en formato JSON y una función para guardar cambios en ella
const DB = require("./db.json");
const { saveToDatabase } = require("./utils");

// Función para obtener todos los pedidos de la base de datos
const getAllOrders = () => {
    return DB.orders;
};

// Función para crear un nuevo pedido en la base de datos
const createNewOrder =  (newOrder) => {
    // Verifica si ya existe un pedido con el mismo ID
    const isAlreadyAdded =
        DB.orders.findIndex((order) => order.id === newOrder.id) > -1;

    if (isAlreadyAdded) {
        // Lanza un error si el pedido ya existe
        throw {
            status: 400,
            message: 'Ya existe un pedido con ese código'
        };
    }

    try {
        // Agrega el nuevo pedido al array de pedidos y guarda la base de datos
        DB.orders.push(newOrder);
        saveToDatabase(DB);

        // Reduce el stock de los ítems después de crear el pedido
        for (const item of newOrder.items) {
            const stockItem = DB.items.find(i => i.id === item.id); // Busca el item en la base de datos

            if (!stockItem) {
                throw {
                    status: 404,
                    message: `El item con ID ${item.id} no existe`
                };
            }

            // Reduce el stock del ítem
            stockItem.stock -= item.stock;

            // Opcional: Asegúrate de que no se reduzca a un valor negativo
            if (stockItem.stock < 0) {
                throw {
                    status: 400,
                    message: `No hay suficiente stock para el item con ID ${item.itemId}`
                };
            }
        }

        // Guarda los cambios en el stock después de actualizar
        saveToDatabase(DB);
        
        return newOrder;
    } catch (error) {
        throw { status: 500, message: error?.message || error };
    }
};

// Función para obtener un pedido específico por su ID
const getOneOrder = (orderId) => {
    try {
        // Busca el pedido por ID
        const order = DB.orders.find((o) => o.id === orderId);
        if (!order) {
            // Lanza un error si el pedido no se encuentra
            throw {
                status: 400,
                message: "Pedido no encontrado",
            };
        }
        return order;
    } catch (error) {
        throw { status: error?.status || 500, message: error?.message || error };
    }
};


// Exporta las funciones para ser utilizadas en el servicio
module.exports = {
    getAllOrders,
    createNewOrder,
    getOneOrder,
};